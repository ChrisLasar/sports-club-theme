# GitHub Actions Workflow: Deploy Preview (Feature Branches)
# Purpose: Deploy feature branches to /preview/{branch-name}/
# Trigger: Push to any branch except main
# Target: https://username.github.io/repo-name/preview/{branch-name}/

name: Deploy Preview

on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:

# Prevent concurrent deployments of same branch
concurrency:
  group: deploy-preview-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

env:
  HUGO_VERSION: "0.152.0"
  NODE_VERSION: "22"
  BASE_URL: "https://chrislasar.github.io/sports-club-theme/"

jobs:
  build-and-deploy:
    name: Build and Deploy Preview
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Sanitize branch name
        id: sanitize
        run: |
          # Convert branch name to URL-safe format
          BRANCH="${{ github.ref_name }}"
          SANITIZED=$(echo "$BRANCH" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          echo "branch=$SANITIZED" >> $GITHUB_OUTPUT
          echo "Preview directory: preview/$SANITIZED"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install npm dependencies
        run: npm ci
        
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true
          
      - name: Setup Hugo Cache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: hugo-${{ steps.sanitize.outputs.branch }}-${{ github.run_id }}
          restore-keys: |
            hugo-${{ steps.sanitize.outputs.branch }}-
            hugo-
            
      - name: Build Hugo Site
        id: build
        continue-on-error: true
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
        run: |
          hugo \
            --minify \
            --baseURL "${{ env.BASE_URL }}/preview/${{ steps.sanitize.outputs.branch }}/" \
            --environment preview \
            --buildDrafts \
            --buildFuture
            
      - name: Generate Preview Metadata (Success)
        if: steps.build.outcome == 'success'
        run: |
          cat > public/.preview-meta.json <<EOF
          {
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "commit_message": $(echo '${{ github.event.head_commit.message }}' | jq -Rs .),
            "commit_author": "${{ github.event.head_commit.author.name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "build_status": "success",
            "build_duration_seconds": $SECONDS,
            "hugo_version": "${{ env.HUGO_VERSION }}",
            "error_message": null
          }
          EOF
          
      - name: Generate Error Page (Failure)
        if: steps.build.outcome == 'failure'
        run: |
          mkdir -p public
          
          # Create metadata
          cat > public/.preview-meta.json <<EOF
          {
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "commit_message": $(echo '${{ github.event.head_commit.message }}' | jq -Rs .),
            "commit_author": "${{ github.event.head_commit.author.name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "build_status": "error",
            "build_duration_seconds": $SECONDS,
            "hugo_version": "${{ env.HUGO_VERSION }}",
            "error_message": "Hugo build failed. See workflow logs for details."
          }
          EOF
          
          # Create error page
          cat > public/error.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Build Failed - ${{ github.ref_name }}</title>
              <style>
                  body {
                      font-family: system-ui, -apple-system, sans-serif;
                      max-width: 800px;
                      margin: 4rem auto;
                      padding: 0 2rem;
                      line-height: 1.6;
                  }
                  .error-container {
                      border: 2px solid #ef4444;
                      border-radius: 8px;
                      padding: 2rem;
                      background: #fef2f2;
                  }
                  h1 {
                      color: #991b1b;
                      margin-top: 0;
                  }
                  .info-grid {
                      display: grid;
                      grid-template-columns: 150px 1fr;
                      gap: 0.5rem 1rem;
                      margin: 1.5rem 0;
                  }
                  .label {
                      font-weight: 600;
                      color: #666;
                  }
                  .value {
                      font-family: 'Courier New', monospace;
                      color: #333;
                  }
                  .actions {
                      margin-top: 2rem;
                      display: flex;
                      gap: 1rem;
                  }
                  .btn {
                      padding: 0.75rem 1.5rem;
                      text-decoration: none;
                      border-radius: 6px;
                      font-weight: 500;
                  }
                  .btn-primary {
                      background: #3b82f6;
                      color: white;
                  }
                  .btn-secondary {
                      background: #e5e7eb;
                      color: #374151;
                  }
                  pre {
                      background: #f9fafb;
                      border: 1px solid #d1d5db;
                      border-radius: 4px;
                      padding: 1rem;
                      overflow-x: auto;
                  }
              </style>
          </head>
          <body>
              <div class="error-container">
                  <h1>‚ùå Build Failed</h1>
                  <p>The Hugo build for this preview deployment failed. Please check the workflow logs for detailed error information.</p>
                  
                  <div class="info-grid">
                      <div class="label">Branch:</div>
                      <div class="value">${{ github.ref_name }}</div>
                      
                      <div class="label">Commit:</div>
                      <div class="value">${{ github.sha }}</div>
                      
                      <div class="label">Time:</div>
                      <div class="value">$(date -u +"%Y-%m-%d %H:%M:%S UTC")</div>
                      
                      <div class="label">Hugo Version:</div>
                      <div class="value">${{ env.HUGO_VERSION }}</div>
                  </div>
                  
                  <div class="actions">
                      <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
                         class="btn btn-primary">
                          View Full Logs
                      </a>
                      <a href="https://github.com/${{ github.repository }}/commit/${{ github.sha }}" 
                         class="btn btn-secondary">
                          View Commit
                      </a>
                      <a href="../../" class="btn btn-secondary">
                          Back to Preview Index
                      </a>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-deploy
          
      - name: Deploy to Preview Directory
        run: |
          cd gh-pages-deploy
          
          # Create preview directory if it doesn't exist
          mkdir -p preview/${{ steps.sanitize.outputs.branch }}
          
          # Remove old preview content
          rm -rf preview/${{ steps.sanitize.outputs.branch }}/*
          
          # Copy new build to preview directory
          cp -r ../public/* preview/${{ steps.sanitize.outputs.branch }}/
          
          # Ensure .nojekyll exists at root
          touch .nojekyll
          
          # Git config
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit and push
          git add -A
          git commit -m "Deploy preview: ${{ github.ref_name }} (${{ github.sha }})" || echo "No changes"
          git push origin gh-pages
          
      - name: Regenerate Preview Index
        run: |
          cd gh-pages-deploy
          
          # Ensure preview directory exists
          mkdir -p preview
          
          # Generate preview list JSON
          PREVIEWS=""
          COUNT=0
          
          for dir in preview/*/; do
            if [ -d "$dir" ] && [ -f "$dir/.preview-meta.json" ]; then
              META=$(cat "$dir/.preview-meta.json")
              BRANCH_NAME=$(basename "$dir")
              
              # Add URL to metadata
              PREVIEW_WITH_URL=$(echo "$META" | jq --arg url "/preview/$BRANCH_NAME/" '. + {url: $url}')
              
              if [ -z "$PREVIEWS" ]; then
                PREVIEWS="$PREVIEW_WITH_URL"
              else
                PREVIEWS="$PREVIEWS,$PREVIEW_WITH_URL"
              fi
              COUNT=$((COUNT + 1))
            fi
          done
          
          # Write preview list
          echo "{\"generated_at\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"total_previews\":$COUNT,\"previews\":[$PREVIEWS]}" > preview/.preview-list.json
          
          # Generate HTML index (same as deploy-main.yml)
          cat > preview/index.html << 'INDEXEOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployments</title>
              <style>
                  body { font-family: system-ui; max-width: 1200px; margin: 2rem auto; padding: 0 1rem; }
                  h1 { color: #333; }
                  .preview-list { display: grid; gap: 1rem; }
                  .preview-card { border: 1px solid #ddd; border-radius: 8px; padding: 1rem; }
                  .preview-card.success { border-left: 4px solid #22c55e; }
                  .preview-card.error { border-left: 4px solid #ef4444; }
                  .preview-header { display: flex; justify-content: space-between; align-items: start; }
                  .branch-name { font-size: 1.25rem; font-weight: 600; }
                  .status { padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.875rem; }
                  .status.success { background: #dcfce7; color: #166534; }
                  .status.error { background: #fee2e2; color: #991b1b; }
                  .commit-info { color: #666; font-size: 0.875rem; margin-top: 0.5rem; }
                  .actions { margin-top: 1rem; display: flex; gap: 0.5rem; }
                  .btn { padding: 0.5rem 1rem; text-decoration: none; border-radius: 4px; font-size: 0.875rem; }
                  .btn-primary { background: #3b82f6; color: white; }
                  .btn-secondary { background: #e5e7eb; color: #374151; }
              </style>
          </head>
          <body>
              <h1>üöÄ Preview Deployments</h1>
              <p>Active preview deployments for feature branches</p>
              <div class="preview-list" id="previews">Loading...</div>
              
              <script>
                  fetch('.preview-list.json')
                      .then(r => r.json())
                      .then(data => {
                          const container = document.getElementById('previews');
                          if (data.total_previews === 0) {
                              container.innerHTML = '<p>No active previews</p>';
                              return;
                          }
                          
                          container.innerHTML = data.previews
                              .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                              .map(p => \`
                                  <div class="preview-card \${p.build_status}">
                                      <div class="preview-header">
                                          <div class="branch-name">\${p.branch}</div>
                                          <span class="status \${p.build_status}">\${p.build_status}</span>
                                      </div>
                                      <div class="commit-info">
                                          <div>\${p.commit_message}</div>
                                          <div>by \${p.commit_author} ‚Ä¢ \${new Date(p.timestamp).toLocaleString()}</div>
                                      </div>
                                      <div class="actions">
                                          \${p.build_status === 'success' 
                                              ? \`<a href="\${p.url}" class="btn btn-primary">View Preview</a>\`
                                              : \`<a href="\${p.url}error.html" class="btn btn-secondary">View Error</a>\`
                                          }
                                          <a href="https://github.com/REPO_PLACEHOLDER/commit/\${p.commit}" class="btn btn-secondary">View Commit</a>
                                      </div>
                                  </div>
                              \`).join('');
                      })
                      .catch(err => {
                          document.getElementById('previews').innerHTML = '<p>Error loading previews</p>';
                      });
              </script>
          </body>
          </html>
          INDEXEOF
          
          # Replace placeholder with actual repo
          sed -i "s|REPO_PLACEHOLDER|${{ github.repository }}|g" preview/index.html
          
          # Commit index updates
          git add preview/
          git commit -m "Update preview index after deploying ${{ github.ref_name }}" || echo "No changes"
          git push origin gh-pages
          
      - name: Summary
        run: |
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "‚úÖ Preview deployed successfully"
            echo "üåê Preview URL: ${{ env.BASE_URL }}/preview/${{ steps.sanitize.outputs.branch }}/"
          else
            echo "‚ùå Build failed - error page deployed"
            echo "üåê Error page: ${{ env.BASE_URL }}/preview/${{ steps.sanitize.outputs.branch }}/error.html"
          fi
          echo "üì¶ Branch: ${{ github.ref_name }}"
          echo "üì¶ Commit: ${{ github.sha }}"
